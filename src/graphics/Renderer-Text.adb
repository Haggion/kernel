package body Renderer.Text is
   procedure Draw_Character (
      Ch : Character;
      X : Integer;
      Y : Integer;
      Scale : Integer;
      Color : Color_Type
   ) is
   begin
      Draw_Bitmap_5x5 (
         Ch_To_Bitmap (Ch),
         X,
         Y,
         Scale,
         Color
      );
   end Draw_Character;

   procedure Draw_Bitmap_5x5 (
      Bitmap : Bitmap_5x5;
      X : Integer;
      Y : Integer;
      Scale : Integer;
      Color : Color_Type
   ) is
   begin
      for Y0 in 0 .. 4 loop
         for X0 in 0 .. 4 loop
            if Get_Bit (Bitmap (Y0), X0) then
               for Y1 in 0 .. Scale - 1 loop
                  for X1 in 0 .. Scale - 1 loop
                     Draw_Pixel (
                        X + (4 - X0) * Scale + X1,
                        Y + Y0 * Scale + Y1,
                        Color
                     );
                  end loop;
               end loop;
            end if;
         end loop;
      end loop;
   end Draw_Bitmap_5x5;

   function Ch_To_Bitmap (Ch : Character) return Bitmap_5x5 is
   begin
      case Ch is
         when 'A' =>
            return (
               2#01100#,
               2#10010#,
               2#11110#,
               2#10010#,
               2#10010#
            );
         when 'B' =>
            return (
               2#11100#,
               2#10010#,
               2#11100#,
               2#10010#,
               2#11100#
            );
         when 'C' =>
            return (
               2#01110#,
               2#10000#,
               2#10000#,
               2#10000#,
               2#01110#
            );
         when 'D' =>
            return (
               2#11100#,
               2#10010#,
               2#10010#,
               2#10010#,
               2#11100#
            );
         when 'E' =>
            return (
               2#11110#,
               2#10000#,
               2#11100#,
               2#10000#,
               2#11110#
            );
         when 'F' =>
            return (
               2#11110#,
               2#10000#,
               2#11100#,
               2#10000#,
               2#10000#
            );
         when 'G' =>
            return (
               2#01110#,
               2#10000#,
               2#10111#,
               2#10001#,
               2#01110#
            );
         when 'H' =>
            return (
               2#10010#,
               2#10010#,
               2#11110#,
               2#10010#,
               2#10010#
            );
         when 'I' =>
            return (
               2#11111#,
               2#00100#,
               2#00100#,
               2#00100#,
               2#11111#
            );
         when 'J' =>
            return (
               2#11111#,
               2#00100#,
               2#00100#,
               2#10100#,
               2#01000#
            );
         when 'K' =>
            return (
               2#10100#,
               2#10100#,
               2#11000#,
               2#10100#,
               2#10100#
            );
         when 'L' =>
            return (
               2#10000#,
               2#10000#,
               2#10000#,
               2#10000#,
               2#11100#
            );
         when 'M' =>
            return (
               2#11011#,
               2#10101#,
               2#10101#,
               2#10101#,
               2#10101#
            );
         when 'N' =>
            return (
               2#10010#,
               2#11010#,
               2#10110#,
               2#10110#,
               2#10010#
            );
         when 'O' =>
            return (
               2#01110#,
               2#10001#,
               2#10001#,
               2#10001#,
               2#01110#
            );
         when 'P' =>
            return (
               2#11100#,
               2#10100#,
               2#11100#,
               2#10000#,
               2#10000#
            );
         when 'Q' =>
            return (
               2#11110#,
               2#10010#,
               2#10110#,
               2#11111#,
               2#00001#
            );
         when 'R' =>
            return (
               2#11100#,
               2#10100#,
               2#11000#,
               2#10100#,
               2#10010#
            );
         when 'S' =>
            return (
               2#01111#,
               2#10000#,
               2#01110#,
               2#00001#,
               2#11110#
            );
         when 'T' =>
            return (
               2#11111#,
               2#00100#,
               2#00100#,
               2#00100#,
               2#00100#
            );
         when 'U' =>
            return (
               2#10001#,
               2#10001#,
               2#10001#,
               2#10001#,
               2#01110#
            );
         when 'V' =>
            return (
               2#10001#,
               2#10001#,
               2#10001#,
               2#01010#,
               2#00100#
            );
         when 'W' =>
            return (
               2#00000#,
               2#10001#,
               2#10101#,
               2#10101#,
               2#01010#
            );
         when 'X' =>
            return (
               2#10001#,
               2#01010#,
               2#00100#,
               2#01010#,
               2#10001#
            );
         when 'Y' =>
            return (
               2#01010#,
               2#01010#,
               2#00100#,
               2#00100#,
               2#00100#
            );
         when 'Z' =>
            return (
               2#11111#,
               2#00010#,
               2#00100#,
               2#01000#,
               2#11111#
            );
         when 'a' =>
            return (
               2#01100#,
               2#00010#,
               2#01110#,
               2#10010#,
               2#01100#
            );
         when 'b' =>
            return (
               2#10000#,
               2#10000#,
               2#11000#,
               2#10100#,
               2#11000#
            );
         when 'c' =>
            return (
               2#00000#,
               2#01100#,
               2#10000#,
               2#10000#,
               2#01100#
            );
         when 'd' =>
            return (
               2#00100#,
               2#00100#,
               2#01100#,
               2#10100#,
               2#01100#
            );
         when 'e' =>
            return (
               2#01100#,
               2#10010#,
               2#11100#,
               2#10000#,
               2#01110#
            );
         when 'f' =>
            return (
               2#00100#,
               2#01000#,
               2#11100#,
               2#01000#,
               2#01000#
            );
         when 'g' =>
            return (
               2#01000#,
               2#10100#,
               2#01000#,
               2#00100#,
               2#11100#
            );
         when 'h' =>
            return (
               2#10000#,
               2#10000#,
               2#11000#,
               2#10100#,
               2#10100#
            );
         when 'i' =>
            return (
               2#00100#,
               2#00000#,
               2#00100#,
               2#00100#,
               2#00100#
            );
         when 'j' =>
            return (
               2#00100#,
               2#00000#,
               2#00100#,
               2#10100#,
               2#01100#
            );
         when 'k' =>
            return (
               2#10000#,
               2#10100#,
               2#11000#,
               2#10100#,
               2#10100#
            );
         when 'l' =>
            return (
               2#00000#,
               2#00100#,
               2#00100#,
               2#00100#,
               2#00100#
            );
         when 'm' =>
            return (
               2#00000#,
               2#10000#,
               2#11010#,
               2#10101#,
               2#10101#
            );
         when 'n' =>
            return (
               2#00000#,
               2#10000#,
               2#11000#,
               2#10100#,
               2#10100#
            );
         when 'o' =>
            return (
               2#00000#,
               2#00000#,
               2#01000#,
               2#10100#,
               2#01000#
            );
         when 'p' =>
            return (
               2#01000#,
               2#10100#,
               2#11000#,
               2#10000#,
               2#10000#
            );
         when 'q' =>
            return (
               2#01000#,
               2#10100#,
               2#01100#,
               2#00100#,
               2#00100#
            );
         when 'r' =>
            return (
               2#00000#,
               2#01100#,
               2#10000#,
               2#10000#,
               2#10000#
            );
         when 's' =>
            return (
               2#00000#,
               2#01000#,
               2#10000#,
               2#01000#,
               2#10000#
            );
         when 't' =>
            return (
               2#01000#,
               2#11100#,
               2#01000#,
               2#01000#,
               2#01000#
            );
         when 'u' =>
            return (
               2#00000#,
               2#10010#,
               2#10010#,
               2#10010#,
               2#01100#
            );
         when 'v' =>
            return (
               2#00000#,
               2#00000#,
               2#10100#,
               2#10100#,
               2#01000#
            );
         when 'w' =>
            return (
               2#00000#,
               2#00000#,
               2#10001#,
               2#10101#,
               2#01010#
            );
         when 'x' =>
            return (
               2#00000#,
               2#00000#,
               2#10100#,
               2#01000#,
               2#10100#
            );
         when 'y' =>
            return (
               2#00000#,
               2#00000#,
               2#10100#,
               2#01000#,
               2#10000#
            );
         when 'z' =>
            return (
               2#00000#,
               2#11100#,
               2#00100#,
               2#01000#,
               2#01110#
            );
         when ' ' =>
            return (
               2#00000#,
               2#00000#,
               2#00000#,
               2#00000#,
               2#00000#
            );
         when '1' =>
            return (
               2#01000#,
               2#11000#,
               2#01000#,
               2#01000#,
               2#11100#
            );
         when '2' =>
            return (
               2#01100#,
               2#10010#,
               2#00100#,
               2#11000#,
               2#11110#
            );
         when '3' =>
            return (
               2#11000#,
               2#00100#,
               2#11000#,
               2#00100#,
               2#11000#
            );
         when '4' =>
            return (
               2#10100#,
               2#10100#,
               2#11110#,
               2#00100#,
               2#00100#
            );
         when '5' =>
            return (
               2#11110#,
               2#10000#,
               2#11100#,
               2#00010#,
               2#11100#
            );
         when '6' =>
            return (
               2#01000#,
               2#10000#,
               2#01100#,
               2#10010#,
               2#01100#
            );
         when '7' =>
            return (
               2#11100#,
               2#00100#,
               2#00100#,
               2#01000#,
               2#01000#
            );
         when '8' =>
            return (
               2#01000#,
               2#10100#,
               2#01000#,
               2#10100#,
               2#01000#
            );
         when '9' =>
            return (
               2#01100#,
               2#10010#,
               2#01100#,
               2#00010#,
               2#01100#
            );
         when '0' =>
            return (
               2#01100#,
               2#10010#,
               2#10010#,
               2#10010#,
               2#01100#
            );
         when ',' =>
            return (
               2#00000#,
               2#00000#,
               2#00000#,
               2#01000#,
               2#10000#
            );
         when '.' =>
            return (
               2#00000#,
               2#00000#,
               2#00000#,
               2#00000#,
               2#10000#
            );
         when '>' =>
            return (
               2#01000#,
               2#00100#,
               2#00010#,
               2#00100#,
               2#01000#
            );
         when '<' =>
            return (
               2#00010#,
               2#00100#,
               2#01000#,
               2#00100#,
               2#00010#
            );
         when '/' =>
            return (
               2#00001#,
               2#00010#,
               2#00100#,
               2#01000#,
               2#10000#
            );
         when '?' =>
            return (
               2#01100#,
               2#10010#,
               2#00100#,
               2#00000#,
               2#00100#
            );
         when ';' =>
            return (
               2#00000#,
               2#10000#,
               2#00000#,
               2#01000#,
               2#10000#
            );
         when ':' =>
            return (
               2#00000#,
               2#10000#,
               2#00000#,
               2#00000#,
               2#10000#
            );
         when ''' =>
            return (
               2#10000#,
               2#10000#,
               2#00000#,
               2#00000#,
               2#00000#
            );
         when '"' =>
            return (
               2#10100#,
               2#10100#,
               2#00000#,
               2#00000#,
               2#00000#
            );
         when '[' =>
            return (
               2#11000#,
               2#10000#,
               2#10000#,
               2#10000#,
               2#11000#
            );
         when ']' =>
            return (
               2#11000#,
               2#01000#,
               2#01000#,
               2#01000#,
               2#11000#
            );
         when '{' =>
            return (
               2#01100#,
               2#01000#,
               2#11000#,
               2#01000#,
               2#01100#
            );
         when '}' =>
            return (
               2#11000#,
               2#01000#,
               2#01100#,
               2#01000#,
               2#11000#
            );
         when '\' =>
            return (
               2#10000#,
               2#01000#,
               2#00100#,
               2#00010#,
               2#00001#
            );
         when '|' =>
            return (
               2#10000#,
               2#10000#,
               2#10000#,
               2#10000#,
               2#10000#
            );
         when '-' =>
            return (
               2#00000#,
               2#00000#,
               2#11100#,
               2#00000#,
               2#00000#
            );
         when '_' =>
            return (
               2#00000#,
               2#00000#,
               2#00000#,
               2#00000#,
               2#11111#
            );
         when '=' =>
            return (
               2#00000#,
               2#11100#,
               2#00000#,
               2#11100#,
               2#00000#
            );
         when '+' =>
            return (
               2#00000#,
               2#01000#,
               2#11100#,
               2#01000#,
               2#00000#
            );
         when '!' =>
            return (
               2#10000#,
               2#10000#,
               2#10000#,
               2#00000#,
               2#10000#
            );
         when '@' =>
            return (
               2#01100#,
               2#10010#,
               2#10110#,
               2#10000#,
               2#01100#
            );
         when '#' =>
            return (
               2#01010#,
               2#11111#,
               2#01010#,
               2#11111#,
               2#01010#
            );
         when '$' =>
            return (
               2#11100#,
               2#11000#,
               2#01100#,
               2#11100#,
               2#01000#
            );
         when '%' =>
            return (
               2#11001#,
               2#11010#,
               2#00100#,
               2#01011#,
               2#10011#
            );
         when '^' =>
            return (
               2#01000#,
               2#10100#,
               2#00000#,
               2#00000#,
               2#00000#
            );
         when '&' =>
            return (
               2#01000#,
               2#01000#,
               2#10101#,
               2#10010#,
               2#01101#
            );
         when '*' =>
            return (
               2#00000#,
               2#00000#,
               2#10000#,
               2#00000#,
               2#00000#
            );
         when '(' =>
            return (
               2#01000#,
               2#10000#,
               2#10000#,
               2#10000#,
               2#01000#
            );
         when ')' =>
            return (
               2#10000#,
               2#01000#,
               2#01000#,
               2#01000#,
               2#10000#
            );
         when '`' =>
            return (
               2#10000#,
               2#01000#,
               2#00000#,
               2#00000#,
               2#00000#
            );
         when '~' =>
            return (
               2#00000#,
               2#01000#,
               2#10101#,
               2#00010#,
               2#00000#
            );
         when others =>
            return (
               2#01100#,
               2#10010#,
               2#00100#,
               2#00000#,
               2#00100#
            );
      end case;
   end Ch_To_Bitmap;
end Renderer.Text;